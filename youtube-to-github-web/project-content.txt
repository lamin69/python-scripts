File: /home/lamine/youtube-to-github-web1/static/script.js
Content:
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const resultDiv = document.getElementById('result');
    const loadingDiv = document.getElementById('loading');

    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        loadingDiv.style.display = 'block';
        resultDiv.textContent = '';

        const formData = new FormData(form);
        try {
            const response = await fetch('/run_script', {
                method: 'POST',
                body: formData
            });
            const data = await response.json();
            resultDiv.textContent = data.result;
        } catch (error) {
            resultDiv.textContent = 'An error occurred: ' + error.message;
        } finally {
            loadingDiv.style.display = 'none';
        }
    });

    window.updateFields = function() {
        var script = document.getElementById("script").value;
        var youtubeFields = document.getElementById("youtube_fields");
        var scraperFields = document.getElementById("scraper_fields");

        if (script === "youtube_to_github") {
            youtubeFields.style.display = "block";
            scraperFields.style.display = "none";
        } else if (script === "channel_scraper") {
            youtubeFields.style.display = "none";
            scraperFields.style.display = "block";
        }
    }
});
\n\n
File: /home/lamine/youtube-to-github-web1/static/styles.css
Content:
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

.container {
    width: 80%;
    margin: auto;
    overflow: hidden;
    padding: 20px;
}

h1 {
    color: #333;
    text-align: center;
}

form {
    background: #fff;
    padding: 20px;
    border-radius: 5px;
}

input[type='text'], input[type='password'], select {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

button {
    display: block;
    width: 100%;
    padding: 10px;
    background: #333;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background: #555;
}

#result {
    margin-top: 20px;
    padding: 10px;
    background: #fff;
    border-radius: 5px;
}

#loading {
    display: none;
    text-align: center;
    margin-top: 20px;
}
\n\n
File: /home/lamine/youtube-to-github-web1/Dockerfile
Content:
# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Make port 8085 available to the world outside this container
EXPOSE 8000

# Run app.main:app when the container launches
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8085"]\n\n
File: /home/lamine/youtube-to-github-web1/project_contents.txt
Content:
File: /home/lamine/youtube-to-github-web1/requirements.txt
Content:
fastapi
uvicorn[standard]
jinja2
python-multipart
google-auth-oauthlib
google-api-python-client
requests
PyGithub
beautifulsoup4\n\n
File: /home/lamine/youtube-to-github-web1/templates/index.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube to GitHub</title>
    <link rel="stylesheet" href="{{ url_for('static', path='/styles.css') }}">
</head>
<body>
    <div class="container">
        <h1>YouTube to GitHub</h1>
        <form action="/run_script" method="post">
            <label for="script">Select Script:</label>
            <select id="script" name="script" onchange="updateFields()">
                <option value="youtube_to_github">YouTube to GitHub</option>
                <option value="channel_scraper">Channel Scraper</option>
            </select>

            <div id="youtube_fields">
                <input type="text" name="input1" placeholder="YouTube Playlist URL" required>
            </div>
            <div id="scraper_fields" style="display:none;">
                <input type="text" name="input1" placeholder="Website URL to Scrape" required>
            </div>

            <input type="text" name="input2" placeholder="GitHub Username" required>
            <input type="text" name="input3" placeholder="GitHub Repository" required>
            <input type="password" name="input4" placeholder="GitHub Token" required>
            <button type="submit">Run Script</button>
        </form>
        <div id="loading">Loading...</div>
        <div id="result"></div>
    </div>

    <script src="{{ url_for('static', path='/script.js') }}"></script>
</body>
</html>\n\n
File: /home/lamine/youtube-to-github-web1/app/youtube_to_github.py
Content:
import os
import google_auth_oauthlib.flow
import googleapiclient.discovery
import googleapiclient.errors
import requests
from github import Github
import base64

scopes = ["https://www.googleapis.com/auth/youtube.force-ssl"]

def youtube_to_github(playlist_url, github_username, github_repo, github_token):
    try:
        # Extract playlist ID from URL
        playlist_id = playlist_url.split("list=")[1]

        # Disable OAuthlib's HTTPS verification when running locally.
        # *DO NOT* leave this option enabled in production.
        os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

        api_service_name = "youtube"
        api_version = "v3"
        client_secrets_file = "YOUR_CLIENT_SECRET_FILE.json"

        # Get credentials and create an API client
        flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
            client_secrets_file, scopes)
        credentials = flow.run_console()
        youtube = googleapiclient.discovery.build(
            api_service_name, api_version, credentials=credentials)

        # Retrieve playlist items
        request = youtube.playlistItems().list(
            part="snippet",
            playlistId=playlist_id,
            maxResults=50
        )
        response = request.execute()

        # Create .m3u file content
        m3u_content = "#EXTM3U\n"
        for item in response['items']:
            video_title = item['snippet']['title']
            video_id = item['snippet']['resourceId']['videoId']
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            m3u_content += f"#EXTINF:-1,{video_title}\n{video_url}\n"

        # Upload to GitHub
        g = Github(github_token)
        repo = g.get_user(github_username).get_repo(github_repo)
        file_path = "playlist.m3u"
        repo.create_file(file_path, "Add playlist.m3u", m3u_content, branch="main")

        return "Playlist successfully uploaded to GitHub"
    except Exception as e:
        return f"An error occurred: {str(e)}"
\n\n
File: /home/lamine/youtube-to-github-web1/app/channel_scraper.py
Content:
import requests
from bs4 import BeautifulSoup
from github import Github

def channel_scraper(website_url, github_username, github_repo, github_token):
    try:
        # Scrape the website for channel links
        response = requests.get(website_url)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        channels = []
        for link in soup.find_all('a'):
            href = link.get('href')
            if href and (href.endswith('.m3u') or href.endswith('.m3u8') or href.endswith('.ts')):
                channels.append(href)

        # Create .m3u file content
        m3u_content = "#EXTM3U\n"
        for channel in channels:
            m3u_content += f"{channel}\n"

        # Upload to GitHub
        g = Github(github_token)
        repo = g.get_user(github_username).get_repo(github_repo)
        file_path = "channels.m3u"
        repo.create_file(file_path, "Add channels.m3u", m3u_content, branch="main")

        return f"Channels successfully scraped and uploaded to GitHub. Total channels found: {len(channels)}"
    except Exception as e:
        return f"An error occurred: {str(e)}"
\n\n
File: /home/lamine/youtube-to-github-web1/app/main.py
Content:
from fastapi import FastAPI, Request, Form
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from app.youtube_to_github import youtube_to_github
from app.channel_scraper import channel_scraper

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/run_script")
async def run_script(
    script: str = Form(...),
    input1: str = Form(...),
    input2: str = Form(...),
    input3: str = Form(...),
    input4: str = Form(...)
):
    if script == "youtube_to_github":
        result = youtube_to_github(input1, input2, input3, input4)
    elif script == "channel_scraper":
        result = channel_scraper(input1, input2, input3, input4)
    else:
        result = "Invalid script selected"
    
    return {"result": result}\n\n
