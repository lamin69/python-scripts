File: /home/lamine/all-in-one-script/app.py
Content:
from flask import Flask, render_template, request, jsonify
import subprocess
import os
import traceback

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/run_script', methods=['POST'])
def run_script():
    try:
        script_choice = request.form['script_choice']
        
        if script_choice == 'youtube-to-github':
            playlist_url = request.form['playlist_url']
            github_username = request.form['github_username']
            github_repo = request.form['github_repo']
            github_token = request.form['github_token']
            
            script_path = os.path.join(os.path.dirname(__file__), 'youtube-to-GitHub.py')
            result = subprocess.run(['python', script_path, playlist_url, github_username, github_repo, github_token], capture_output=True, text=True)
            
        elif script_choice == 'channel-scraper':
            websites = request.form['websites']
            github_username = request.form['github_username']
            github_repo = request.form['github_repo']
            github_token = request.form['github_token']
            
            script_path = os.path.join(os.path.dirname(__file__), 'channel_scraper.py')
            result = subprocess.run(['python', script_path, websites, github_username, github_repo, github_token], capture_output=True, text=True)
            
        else:
            return jsonify({'success': False, 'message': 'Invalid script choice'})

        if result.returncode == 0:
            return jsonify({'success': True, 'message': 'Script executed successfully', 'output': result.stdout})
        else:
            return jsonify({'success': False, 'message': 'Script execution failed', 'error': result.stderr})

    except Exception as e:
        app.logger.error(f"An error occurred: {str(e)}")
        app.logger.error(traceback.format_exc())
        return jsonify({'success': False, 'message': 'An unexpected error occurred', 'error': str(e)})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
\n\n
File: /home/lamine/all-in-one-script/static/css/styles.css
Content:
:root {
  --bg-color: #ffffff;
  --text-color: #000000;
  --primary-color: #4CAF50;
  --secondary-color: #3e8e41;
}

body {
  font-family: 'Arial', sans-serif;
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: all 0.3s ease;
  line-height: 1.6;
  padding: 20px;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
  margin-bottom: 30px;
}

form {
  display: grid;
  gap: 20px;
}

label {
  font-weight: bold;
}

input[type="text"],
input[type="password"] {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 16px;
}

.button-3d {
  padding: 10px 20px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 5px;
  box-shadow: 0 5px #999;
  transition: all 0.3s ease;
  cursor: pointer;
  font-size: 16px;
}

.button-3d:hover {
  background-color: var(--secondary-color);
}

.button-3d:active {
  background-color: var(--secondary-color);
  box-shadow: 0 2px #666;
  transform: translateY(4px);
}

#result {
  margin-top: 20px;
  padding: 10px;
  border-radius: 5px;
  background-color: rgba(255, 255, 255, 0.1);
}

#darkModeToggle {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 10px;
  background-color: #333;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.dark-mode {
  --bg-color: #1a1a1a;
  --text-color: #ffffff;
}
\n\n
File: /home/lamine/all-in-one-script/static/js/main.js
Content:
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('playlistForm');
    const result = document.getElementById('result');
    const darkModeToggle = document.getElementById('darkModeToggle');
    const flashingTitle = document.getElementById('flashingTitle');

    form.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        fetch('/', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            result.innerHTML = data.message;
        })
        .catch(error => {
            result.innerHTML = 'An error occurred: ' + error;
        });
    });

    darkModeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
    });

    // Flashing title effect
    setInterval(() => {
        flashingTitle.style.opacity = flashingTitle.style.opacity === '1' ? '0.5' : '1';
    }, 500);
});
\n\n
File: /home/lamine/all-in-one-script/script.py
Content:
import os
import re
import logging
from github import Github
from github import GithubException
from pytube import Playlist, exceptions

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def run_script(playlist_url, github_username, github_repo, github_token):
    try:
        playlist = Playlist(playlist_url)
        playlist._video_regex = re.compile(r"\"url\":\"(/watch\?v=[\w-]*)")

        videos = []
        for video in playlist.videos:
            try:
                videos.append((video.title, video.watch_url))
            except Exception as e:
                logging.error(f"Error processing video in playlist: {e}")

        videos.sort(key=lambda x: x[0])

        m3u_content = "#EXTM3U\n"
        for title, url in videos:
            m3u_content += f"#EXTINF:-1,{title}\n{url}\n"

        playlist_name = playlist.title 
        file_name = f"{playlist_name}.m3u"
        
        g = Github(github_token)
        repo = g.get_user(github_username).get_repo(github_repo) 
        
        try:
            contents = repo.get_contents(file_name)
            repo.update_file(contents.path, "Update playlist", m3u_content, contents.sha)
            return {"status": "success", "message": f"Playlist '{playlist_name}' updated on GitHub."}
        except GithubException as e:
            if e.status == 404:
                repo.create_file(file_name, "Add playlist", m3u_content)
                return {"status": "success", "message": f"Playlist '{playlist_name}' created on GitHub."}
            else:
                return {"status": "error", "message": f"An error occurred while updating/creating the file on GitHub: {str(e)}"}

    except exceptions.RegexMatchError:
        return {"status": "error", "message": f"Invalid playlist URL: {playlist_url}. Please check the format."}
    except KeyError:
        return {"status": "error", "message": f"Error extracting video information from the playlist: {playlist_url}"}
    except Exception as e:
        return {"status": "error", "message": f"An unexpected error occurred: {str(e)}"}\n\n
File: /home/lamine/all-in-one-script/Dockerfile
Content:
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 5000

CMD ["python", "-u", "app.py"]
\n\n
File: /home/lamine/all-in-one-script/channel_scraper.py
Content:
import sys
import requests
from bs4 import BeautifulSoup
import re
import github

def scrape_channels(websites):
    channels = []
    for website in websites:
        response = requests.get(website)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Look for .m3u, .m3u8, or .ts files
        links = soup.find_all('a', href=re.compile(r'\.(m3u|m3u8|ts)$'))
        
        for link in links:
            channels.append(link['href'])
    
    return channels

def upload_to_github(channels, github_username, github_repo, github_token):
    g = github.Github(github_token)
    repo = g.get_user(github_username).get_repo(github_repo)
    
    content = "#EXTM3U\n" + "\n".join(channels)
    
    try:
        contents = repo.get_contents("channels.m3u")
        repo.update_file(contents.path, "Update channels list", content, contents.sha)
        print("channels.m3u updated successfully.")
    except github.GithubException:
        repo.create_file("channels.m3u", "Create channels list", content)
        print("channels.m3u created successfully.")

if __name__ == "__main__":
    websites = sys.argv[1].split(',')
    github_username = sys.argv[2]
    github_repo = sys.argv[3]
    github_token = sys.argv[4]
    
    channels = scrape_channels(websites)
    upload_to_github(channels, github_username, github_repo, github_token)
    
    print(f"Successfully scraped and uploaded {len(channels)} channels.")
\n\n
File: /home/lamine/all-in-one-script/project_contents.txt
Content:
File: /home/lamine/all-in-one-script/youtube-to-GitHub.py
Content:
import sys
import requests
from bs4 import BeautifulSoup
import github

def get_playlist_videos(playlist_url):
    response = requests.get(playlist_url)
    soup = BeautifulSoup(response.text, 'html.parser')
    video_links = soup.find_all('a', {'class': 'yt-simple-endpoint style-scope ytd-playlist-video-renderer'})
    return [f"https://www.youtube.com{link['href'].split('&')[0]}" for link in video_links]

def create_m3u_content(video_urls):
    return "#EXTM3U\n" + "\n".join(video_urls)

def upload_to_github(content, github_username, github_repo, github_token):
    g = github.Github(github_token)
    repo = g.get_user(github_username).get_repo(github_repo)
    
    try:
        contents = repo.get_contents("playlist.m3u")
        repo.update_file(contents.path, "Update playlist", content, contents.sha)
        print("playlist.m3u updated successfully.")
    except github.GithubException:
        repo.create_file("playlist.m3u", "Create playlist", content)
        print("playlist.m3u created successfully.")

if __name__ == "__main__":
    playlist_url = sys.argv[1]
    github_username = sys.argv[2]
    github_repo = sys.argv[3]
    github_token = sys.argv[4]

    video_urls = get_playlist_videos(playlist_url)
    m3u_content = create_m3u_content(video_urls)
    upload_to_github(m3u_content, github_username, github_repo, github_token)
    
    print(f"Successfully processed {len(video_urls)} videos and uploaded to GitHub.")
\n\n
File: /home/lamine/all-in-one-script/requirements.txt
Content:
Flask==2.0.1
Werkzeug==2.2.2
requests==2.26.0
beautifulsoup4==4.10.0
PyGithub==1.55
\n\n
File: /home/lamine/all-in-one-script/templates/index.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Script Runner</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        /* ... (keep the existing styles) ... */
    </style>
</head>
<body>
    <h1>Script Runner</h1>
    <form id="scriptForm">
        <label for="script_choice">Choose a script:</label>
        <select id="script_choice" name="script_choice">
            <option value="youtube-to-github">YouTube to GitHub</option>
            <option value="channel-scraper">Channel Scraper</option>
        </select>
        
        <div id="youtube-to-github-fields">
            <input type="text" id="playlist_url" name="playlist_url" placeholder="YouTube Playlist URL" required>
            <input type="text" id="github_username" name="github_username" placeholder="GitHub Username" required>
            <input type="text" id="github_repo" name="github_repo" placeholder="GitHub Repository" required>
            <input type="password" id="github_token" name="github_token" placeholder="GitHub Token" required>
        </div>
        
        <div id="channel-scraper-fields" style="display: none;">
            <textarea id="websites" name="websites" placeholder="Websites to scrape (one per line)" required></textarea>
            <input type="text" id="github_username" name="github_username" placeholder="GitHub Username" required>
            <input type="text" id="github_repo" name="github_repo" placeholder="GitHub Repository" required>
            <input type="password" id="github_token" name="github_token" placeholder="GitHub Token" required>
        </div>
        
        <button type="submit">Run Script</button>
    </form>
    <div id="result"></div>

    <script>
        $(document).ready(function() {
            $('#script_choice').change(function() {
                if ($(this).val() === 'youtube-to-github') {
                    $('#youtube-to-github-fields').show();
                    $('#channel-scraper-fields').hide();
                } else if ($(this).val() === 'channel-scraper') {
                    $('#youtube-to-github-fields').hide();
                    $('#channel-scraper-fields').show();
                }
            });

            $('#scriptForm').submit(function(e) {
                e.preventDefault();
                $('#result').html('<p>Running script...</p>');
                $.ajax({
                    url: '/run_script',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        if (response.success) {
                            $('#result').html('<p>Success: ' + response.message + '</p><pre>' + response.output + '</pre>');
                        } else {
                            $('#result').html('<p>Error: ' + response.message + '</p><pre>' + response.error + '</pre>');
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        $('#result').html('<p>An error occurred while running the script.</p><p>Status: ' + textStatus + '</p><p>Error: ' + errorThrown + '</p>');
                    }
                });
            });
        });
    </script>
</body>
</html>
\n\n
